{"version":3,"sources":["audio/transport.mp3","audio/person.mp3","utilities.js","App.js","index.js"],"names":["module","exports","drawRect","detections","ctx","forEach","prediction","index","x","y","width","height","title","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","useState","person","setPerson","transport","setTransport","audioTransport","Audio","transportPath","audioPersion","personPath","runMain","a","cocossd","net","console","log","setInterval","detect","playAudio","audio","play","current","video","readyState","videoWidth","videoHeight","obj","objectItems","countPerson","countTransport","Object","values","item","class","push","getContext","useEffect","navigator","mediaDevices","getUserMedia","then","stream","enumerateDevices","devices","arr","device","kind","setDevices","setDeviceId","indexDevice","deviceId","catch","err","error","name","message","loadDevices","React","setIndexDevice","className","Helmet","charSet","content","rel","type","href","length","onClick","indexNew","ref","muted","videoConstraints","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","document","getElementById"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,iVCA9BC,G,OAAW,SAACC,EAAYC,GAEnCD,EAAWE,SAAQ,SAACC,EAAYC,GAAU,kBAGVD,EAAU,KAHA,GAGjCE,EAHiC,KAG9BC,EAH8B,KAG3BC,EAH2B,KAGpBC,EAHoB,KAIpCC,EAAO,GACX,OAAQN,EAAU,OAChB,IAAK,SACHM,EAAQ,sBACR,MACF,IAAK,UACHA,EAAQ,mBACR,MACF,IAAK,MACHA,EAAQ,YACR,MACF,IAAK,aACHA,EAAQ,YAKZ,IAAMC,EAAI,WAAOD,EAAP,KAGJE,EAAQC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAC1Dd,EAAIe,YAAc,IAAML,EACxBV,EAAIgB,KAAO,aAGXhB,EAAIiB,YACJjB,EAAIkB,UAAY,IAAMR,EACtBV,EAAImB,SAASV,EAAML,EAAGC,GACtBL,EAAIoB,KAAKhB,EAAGC,EAAGC,EAAOC,GACtBP,EAAIqB,c,6CCkMOC,MApNf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAFZ,EAGeE,mBAAS,GAHxB,mBAGNC,EAHM,KAGEC,EAHF,OAIqBF,mBAAS,GAJ9B,mBAING,EAJM,KAIKC,EAJL,KAUTC,EAAiB,IAAIC,MAAMC,KAC3BC,EAAe,IAAIF,MAAMG,KAEvBC,EAAO,uCAAG,4BAAAC,EAAA,sEACIC,MADJ,OACRC,EADQ,OAEdC,QAAQC,IAAI,0BAGZC,aAAY,WACVC,EAAOJ,KACN,IAPW,2CAAH,qDASNK,EAAS,uCAAG,WAAMC,GAAN,SAAAR,EAAA,sEAEXQ,EAAMC,OAFK,2CAAH,sDAIVH,EAAM,uCAAG,WAAOJ,GAAP,6BAAAF,EAAA,yDAIkB,qBAAtBd,EAAUwB,SACK,OAAtBxB,EAAUwB,SAC6B,IAAvCxB,EAAUwB,QAAQC,MAAMC,WANb,wBASLD,EAAQzB,EAAUwB,QAAQC,MAC1BE,EAAa3B,EAAUwB,QAAQC,MAAME,WACrCC,EAAc5B,EAAUwB,QAAQC,MAAMG,YAG5C5B,EAAUwB,QAAQC,MAAM1C,MAAQ4C,EAChC3B,EAAUwB,QAAQC,MAAMzC,OAAS4C,EAGjC1B,EAAUsB,QAAQzC,MAAQ4C,EAC1BzB,EAAUsB,QAAQxC,OAAS4C,EAnBhB,UAuBOZ,EAAII,OAAOK,EAAM,KAvBxB,QAuBLI,EAvBK,OAwBPC,EAAc,GACdC,EAAY,EACZC,EAAiB,EAGrBC,OAAOC,OAAOL,GAAKnD,SAAQ,SAACyD,GAKtB,WADDA,EAAKC,OAEW,YAAfD,EAAKC,OACU,QAAfD,EAAKC,OACU,eAAfD,EAAKC,QAEY,WAAfD,EAAKC,MACLL,IAIFC,IAGFF,EAAYO,KAAKF,OAIrB9B,EAAU0B,GACVxB,EAAayB,GAEPvD,EAAMyB,EAAUsB,QAAQc,WAAW,MACzC/D,EAASuD,EAAarD,GAEnBsD,EA7EW,GA+EZV,EAAUV,GAETqB,EAhFa,GAkFdX,EAAUb,GA/DD,4CAAH,sDAqEZ+B,qBAAU,WACR1B,MAEC,IACH0B,qBAAU,WAQRC,UAAUC,aACPC,aAAa,CAACjB,OAAO,IACrBkB,MAAK,SAAUC,IAKpB,WAAwB,IAAD,GACjB,UAACJ,UAAUC,oBAAX,aAAC,EAAwBI,kBAI3BL,UAAUC,aACPI,mBACAF,MAAK,SAACG,GACL,IAAIC,EAAM,GACVD,EAAQpE,SAAQ,SAACsE,GAEK,eAAhBA,EAAOC,MACTF,EAAIV,KAAKW,MAIbE,EAAWH,GAEXI,EAAYL,EAAQM,GAAaC,aAElCC,OAAM,SAACC,GAENtC,QAAQuC,MAAR,UAAiBD,EAAIE,KAArB,aAA8BF,EAAIG,aApBtCzC,QAAQC,IAAI,qEANVyC,QATH,IArGU,MAsGmBC,IAAMzD,SAAS,IAtGlC,mBAsGNkD,EAtGM,KAsGIF,EAtGJ,OAuGiBS,IAAMzD,SAAS,IAvGhC,mBAuGN2C,EAvGM,KAuGGI,EAvGH,OAwGyBU,IAAMzD,SAAS,GAxGxC,mBAwGNiD,EAxGM,KAwGOS,EAxGP,KAuJb,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,0BAAMC,QAAQ,UACd,2CACA,0BAAMP,KAAK,cAAcQ,QAAQ,cACjC,0BAAMC,IAAI,OAAOC,KAAK,YAAYC,KAAK,qBAEzC,4BAAQN,UAAU,cAChB,yBAAKA,UAAU,eAAf,WACWV,EAAc,EADzB,OACgCN,EAAQuB,QAExC,yBAAKP,UAAS,iBAAY1D,EA7Jd,EA6JmC,YAAc,KAA7D,4BACaA,GAEb,yBAAK0D,UAAS,oBAAexD,EA/Jf,EA+J0C,YAAc,KAAtE,+BACgBA,GAEfwC,EAAQuB,OAAS,GAChB,4BAAQP,UAAU,gBAAgBQ,QA7B1C,WACE,IAAIC,EAAWnB,EACXA,EAAcN,EAAQuB,OAAS,EACjCE,IAEAA,EAAW,EAEbV,EAAeU,GACfpB,EAAYL,EAAQyB,GAAUlB,YAqBxB,iBAIF,kBAAC,IAAD,CACEmB,IAAKxE,EACLyE,OAAO,EACPC,iBAAkB,CAChBrB,SAAUA,GAEZsB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRnG,MAAO,OACPC,OAAQ,UAIZ,4BACEwF,IAAKtE,EACLyE,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRnG,MAAO,OACPC,OAAQ,aCxNpBmG,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7f2944c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transport.56531d97.mp3\";","module.exports = __webpack_public_path__ + \"static/media/person.d5b99dce.mp3\";","export const drawRect = (detections, ctx) =>{\n  // Chạy vòng lặp qua tất cả các đối tượng sẽ vẽ\n  detections.forEach((prediction, index) => {\n\n    // Lấy thuộc tính hộp viền hiển thị của đối tượng\n    const [x, y, width, height] = prediction['bbox']; \n    let title ='';\n    switch (prediction[\"class\"]) {\n      case \"person\":\n        title = \"Con người\";\n        break;\n      case \"bicycle\":\n        title = \"Xe đạp\";\n        break;\n      case \"car\":\n        title = \"Ôtô\";\n        break;\n      case \"motorcycle\":\n        title = \"Xe máy\";\n        break;\n      default:\n        break;\n    }\n    const text = `[${title}]`;//`[${index + 1}]`;//prediction['class']; \n\n    // Lấy màu ngẫu nhiên cho các ô viền vẽ đối tượng\n    const color = Math.floor(Math.random()*16777215).toString(16);\n    ctx.strokeStyle = '#' + color\n    ctx.font = '18px Arial';\n\n    // thực hiện vẽ các hộp báo nhận diện đối tượng ra màn hình.\n    ctx.beginPath();   \n    ctx.fillStyle = '#' + color\n    ctx.fillText(text, x, y);\n    ctx.rect(x, y, width, height); \n    ctx.stroke();\n  });\n}\n","// style = các thuộc tính hiển thị của thẻ trên màn hình web\r\n// console = phần hiển thị log khi sử dụng ứng dụng\r\n// ứng dụng tích hợp tính năng phân tích dữ liệu từ hình ảnh dựa theo thuật toán nhận diện của google.\r\n// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawRect } from \"./utilities\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport transportPath from './audio/transport.mp3'\r\nimport personPath from './audio/person.mp3'\r\nexport interface itemDetect {\r\n  objectItems: obj;\r\n  timeExt: Date;\r\n}\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [person, setPerson] = useState(0);\r\n  const [transport, setTransport] = useState(0);\r\n  \r\n  const maxPerson = 0; //Số lượng đối tượng là con người (Nếu lớn  hơn sẽ thông báo: Khu vực cổng trường xin mọi người hãy di chuyển tránh tắc nghẽn giao thông.)\r\n  const maxTransport= 0;  //Số lượng đối tượng là phương tiện tối đa có trong khung hình(Nếu lớn hơn sẽ thông báo: Yêu cầu phương tiện giao thông di chuyển nhanh qua khu vực cổng trường để đảm bảo an toàn giao thông.)\r\n  let itemObj : itemDetect[] =[];\r\n  //\r\n  var audioTransport = new Audio(transportPath);\r\n  var audioPersion = new Audio(personPath);\r\n  // Main function\r\n  const runMain = async () => {\r\n    const net = await cocossd.load();\r\n    console.log(\"Handpose model loaded.\");\r\n    //  Set thời gian re-load tìm kiếm người có trong khung hình đơn vị tính mili giây\r\n    //  Mặc định 10ms sẽ load 1 lần\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n  const  playAudio = async(audio: Audio) =>\r\n  {\r\n    await audio.play();\r\n  }\r\n  const detect = async (net) => {\r\n    // Kiểm tra data video trong khung hình tồn tại\r\n    // undefined = chưa tồn tại/chưa được định nghĩa\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Lấy thông tin video\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Thiết lập chiều cao/rộng cho khung hình video\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Thiết lập chiều cao/rộng cho khung hình viền đối tượng khi phát hiện.\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Phân tích và phát hiện đối tượng trong khung hình - Tối đa được thiết lập là 100\r\n      //(*Tùy số lượng đối tượng cần phát hiện mà thay đổi thông số này)\r\n      const obj = await net.detect(video,1000);\r\n      var objectItems = [];\r\n      let countPerson=0;\r\n      let countTransport = 0;\r\n      //remove item old\r\n      //\r\n      Object.values(obj).forEach((item) => {\r\n        //Các đối tượng là con người(person) sẽ được chọn lọc và lấy ra ở bước này.\r\n        //bicycle, motorcycle , car  = transport\r\n        if (\r\n          (item.class ===\r\n            \"person\" ||\r\n            item.class === \"bicycle\" ||\r\n            item.class === \"car\" ||\r\n            item.class === \"motorcycle\")\r\n        ) {\r\n          if (item.class === \"person\") {\r\n              countPerson++; //Tăng biến đếm  số người lên 1 đơn vị\r\n          }\r\n          else\r\n          {\r\n            countTransport++; //Tăng biến đếm  số phương tiện lên 1 đơn vị\r\n          }\r\n          //find item\r\n          objectItems.push(item);\r\n        }\r\n      });\r\n      //Set số lượng đối tượng là con người được phát hiện trong hình hiển thị lên màn hình\r\n      setPerson(countPerson);\r\n      setTransport(countTransport);\r\n      // Thực hiện vẽ viền những đối tượng được phát hiện là con người.\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      drawRect(objectItems, ctx);\r\n      //\r\n      if(countPerson > maxPerson)\r\n      {\r\n        playAudio(audioPersion)\r\n      }\r\n      if(countTransport > maxTransport)\r\n      {\r\n        playAudio(audioTransport)\r\n      }\r\n      //\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    runMain();\r\n    \r\n  }, []);\r\n  useEffect(() => {\r\n    checkAllowCamera();\r\n  }, []);\r\n  const [deviceId, setDeviceId] = React.useState({});\r\n  const [devices, setDevices] = React.useState([]);\r\n  const [indexDevice, setIndexDevice] = React.useState(0);\r\n  //Kiển tra camera được chấp nhận sử dụng hay chưa.\r\n  function checkAllowCamera() {\r\n    navigator.mediaDevices\r\n      .getUserMedia({video: true })\r\n      .then(function (stream) {\r\n        loadDevices();\r\n      });\r\n  }\r\n  // Load lên tất cả thiết bị là camera được xuất hiện\r\n  function loadDevices() {\r\n    if (!navigator.mediaDevices?.enumerateDevices) {\r\n      console.log(\"enumerateDevices() không được hỗ trợ.\");\r\n    } else {\r\n      // List cameras and microphones.\r\n      navigator.mediaDevices\r\n        .enumerateDevices()\r\n        .then((devices) => {\r\n          var arr = [];\r\n          devices.forEach((device) => {\r\n            //Kiểm tra và lấy ra danh sách các thiết bị là camera(tương ứng videoinput)\r\n            if (device.kind === \"videoinput\") {\r\n              arr.push(device);\r\n            }\r\n          });\r\n          //Set danh sách thiết bị là camera\r\n          setDevices(arr);\r\n          //Set ID thiết bị hiển thị lên màn hình\r\n          setDeviceId(devices[indexDevice].deviceId);\r\n        })\r\n        .catch((err) => {\r\n          // Xuất log nếu gặp lỗi\r\n          console.error(`${err.name}: ${err.message}`);\r\n        });\r\n    }\r\n  }\r\n  // Sự kiện click chuyển đổi camera\r\n  function handleClick() {\r\n    let indexNew = indexDevice;\r\n    if (indexDevice < devices.length - 1) {\r\n      indexNew++;\r\n    } else {\r\n      indexNew = 0;\r\n    }\r\n    setIndexDevice(indexNew);\r\n    setDeviceId(devices[indexNew].deviceId);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>LDM SOFT</title>\r\n        <meta name=\"description\" content=\"camera-ai\" />\r\n        <link rel=\"icon\" type=\"image/png\" href=\"./icon/logo.png\" />\r\n      </Helmet>\r\n      <header className=\"App-header\">\r\n        <div className=\"camera-info\">\r\n          Camera: {indexDevice + 1} of {devices.length}\r\n        </div>\r\n        <div className={`person ${person > maxPerson ? \"alert-red\" : \"\"}`}>\r\n          Số người: {person}\r\n        </div>\r\n        <div className={`transport ${transport > maxTransport ? \"alert-red\" : \"\"}`}>\r\n          Phương tiện: {transport}\r\n        </div>\r\n        {devices.length > 1 && (\r\n          <button className=\"devicesButton\" onClick={handleClick}>\r\n            Change Camera\r\n          </button>\r\n        )}\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true}\r\n          videoConstraints={{\r\n            deviceId: deviceId,\r\n          }}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}