{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","useState","person","setPersion","runCoco","a","cocossd","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","count","Object","values","item","class","getContext","useEffect","navigator","mediaDevices","getUserMedia","audio","then","stream","enumerateDevices","devices","arr","device","JSON","stringify","kind","push","setDevices","setDeviceId","indexDevice","deviceId","catch","err","error","name","message","loadDevices","React","setIndexDevice","className","Helmet","charSet","content","rel","type","href","length","onClick","indexNew","ref","muted","videoConstraints","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","document","getElementById"],"mappings":"sZAAaA,G,OAAW,SAACC,EAAYC,GAEnCD,EAAWE,SAAQ,SAAAC,GAAc,kBAGDA,EAAU,KAHT,GAGxBC,EAHwB,KAGrBC,EAHqB,KAGlBC,EAHkB,KAGXC,EAHW,KAIzBC,EAAOL,EAAU,MAGjBM,EAAQC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAC1DZ,EAAIa,YAAc,IAAML,EACxBR,EAAIc,KAAO,aAGXd,EAAIe,YACJf,EAAIgB,UAAY,IAAMR,EACtBR,EAAIiB,SAASV,EAAMJ,EAAGC,GACtBJ,EAAIkB,KAAKf,EAAGC,EAAGC,EAAOC,GACtBN,EAAImB,c,SC2JOC,MApKf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAFZ,EAGgBE,mBAAS,GAHzB,mBAGNC,EAHM,KAGEC,EAHF,KAKPC,EAAO,uCAAG,4BAAAC,EAAA,sEACIC,MADJ,OACRC,EADQ,OAEdC,QAAQC,IAAI,0BAEZC,aAAY,WACVC,EAAOJ,KACN,IANW,2CAAH,qDAQPI,EAAM,uCAAG,WAAOJ,GAAP,yBAAAF,EAAA,yDAGkB,qBAAtBP,EAAUc,SACK,OAAtBd,EAAUc,SAC6B,IAAvCd,EAAUc,QAAQC,MAAMC,WALb,wBAQLD,EAAQf,EAAUc,QAAQC,MAC1BE,EAAajB,EAAUc,QAAQC,MAAME,WACrCC,EAAclB,EAAUc,QAAQC,MAAMG,YAG5ClB,EAAUc,QAAQC,MAAM/B,MAAQiC,EAChCjB,EAAUc,QAAQC,MAAM9B,OAASiC,EAGjChB,EAAUY,QAAQ9B,MAAQiC,EAC1Bf,EAAUY,QAAQ7B,OAASiC,EAlBhB,UAqBOT,EAAII,OAAOE,GArBlB,QAqBLI,EArBK,OAsBPC,EAAQ,EACZC,OAAOC,OAAOH,GAAKvC,SAAQ,SAAC2C,GACR,UAAdA,EAAKC,OACPJ,OAGJf,EAAWe,GAELzC,EAAMuB,EAAUY,QAAQW,WAAW,MACzChD,EAAS0C,EAAKxC,GA/BH,4CAAH,sDAmCZ+C,qBAAU,WACRpB,MACC,IACHoB,qBAAU,WAQRC,UAAUC,aACPC,aAAa,CAAEC,OAAO,EAAMf,OAAO,IACnCgB,MAAK,SAAUC,IAIpB,WAAwB,IAAD,EACrBtB,QAAQC,IAAI,gBACR,UAACgB,UAAUC,oBAAX,aAAC,EAAwBK,kBAI3BN,UAAUC,aACPK,mBACAF,MAAK,SAACG,GACL,IAAIC,EAAM,GAEVD,EAAQtD,SAAQ,SAACwD,GACRC,KAAKC,UAAUF,GACH,cAAfA,EAAOG,MACTJ,EAAIK,KAAKJ,MAGbK,EAAWN,GAEXO,EAAYR,EAAQS,GAAaC,aAElCC,OAAM,SAACC,GACNpC,QAAQqC,MAAR,UAAiBD,EAAIE,KAArB,aAA8BF,EAAIG,aAnBtCvC,QAAQC,IAAI,qCANVuC,QATH,IArDU,MAsDmBC,IAAMhD,SAAS,IAtDlC,mBAsDNyC,EAtDM,KAsDIF,EAtDJ,OAuDiBS,IAAMhD,SAAS,IAvDhC,mBAuDN+B,EAvDM,KAuDGO,EAvDH,OAwDyBU,IAAMhD,SAAS,GAxDxC,mBAwDNwC,EAxDM,KAwDOS,EAxDP,KAyGb,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,0BAAMC,QAAQ,UACd,2CACA,0BAAMP,KAAK,cAAcQ,QAAQ,eACjC,0BAAMC,IAAI,OAAOC,KAAK,YAAYC,KAAK,qBAEzC,4BAAQN,UAAU,cAChB,yBAAKA,UAAU,eAAf,WACWV,EAAc,EADzB,OACgCT,EAAQ0B,QAExC,yBAAKP,UAAS,iBAAYjD,EAAS,GAAK,YAAc,KAAtD,WACWA,GAGV8B,EAAQ0B,OAAS,GAChB,4BAAQP,UAAU,gBAAgBQ,QA5B1C,WACE,IAAIC,EAAWnB,EACXA,EAAcT,EAAQ0B,OAAS,EACjCE,IAEAA,EAAW,EAEbpD,QAAQC,IAAImD,GACZV,EAAeU,GACfpB,EAAYR,EAAQ4B,GAAUlB,YAmBxB,iBAIF,kBAAC,IAAD,CACEmB,IAAK/D,EACLgE,OAAO,EACPC,iBAAkB,CAChBrB,SAAUA,GAEZsB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRzF,MAAO,OACPC,OAAQ,UAIZ,4BACE8E,IAAK7D,EACLgE,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRzF,MAAO,OACPC,OAAQ,aChKpByF,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3cb986f9.chunk.js","sourcesContent":["export const drawRect = (detections, ctx) =>{\n  // Loop through each prediction\n  detections.forEach(prediction => {\n\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n\n    // Set styling\n    const color = Math.floor(Math.random()*16777215).toString(16);\n    ctx.strokeStyle = '#' + color\n    ctx.font = '18px Arial';\n\n    // Draw rectangles and text\n    ctx.beginPath();   \n    ctx.fillStyle = '#' + color\n    ctx.fillText(text, x, y);\n    ctx.rect(x, y, width, height); \n    ctx.stroke();\n  });\n}\n","// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawRect } from \"./utilities\";\nimport { Helmet } from \"react-helmet\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [person, setPersion] = useState(0);\n  // Main function\n  const runCoco = async () => {\n    const net = await cocossd.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const obj = await net.detect(video);\n      let count = 0;\n      Object.values(obj).forEach((item) => {\n        if (item.class == \"person\") {\n          count++;\n        }\n      });\n      setPersion(count);\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawRect(obj, ctx);\n    }\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, []);\n  useEffect(() => {\n    checkAllowCamera();\n  }, []);\n  const [deviceId, setDeviceId] = React.useState({});\n  const [devices, setDevices] = React.useState([]);\n  const [indexDevice, setIndexDevice] = React.useState(0);\n  // const [logApp, setLogApp] = React.useState(\"\");s\n  function checkAllowCamera() {\n    navigator.mediaDevices\n      .getUserMedia({ audio: true, video: true })\n      .then(function (stream) {\n        loadDevices();\n      });\n  }\n  function loadDevices() {\n    console.log(\"loadDevices\");\n    if (!navigator.mediaDevices?.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n    } else {\n      // List cameras and microphones.\n      navigator.mediaDevices\n        .enumerateDevices()\n        .then((devices) => {\n          var arr = [];\n          var log = \"\";\n          devices.forEach((device) => {\n            log += JSON.stringify(device) + \"\\r\\n\";\n            if (device.kind == \"videoinput\") {\n              arr.push(device);\n            }\n          });\n          setDevices(arr);\n          // setLogApp(log);\n          setDeviceId(devices[indexDevice].deviceId);\n        })\n        .catch((err) => {\n          console.error(`${err.name}: ${err.message}`);\n        });\n    }\n  }\n  //\n\n  //\n  function handleClick() {\n    let indexNew = indexDevice;\n    if (indexDevice < devices.length - 1) {\n      indexNew++;\n    } else {\n      indexNew = 0;\n    }\n    console.log(indexNew);\n    setIndexDevice(indexNew);\n    setDeviceId(devices[indexNew].deviceId);\n  }\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>LDM SOFT</title>\n        <meta name=\"description\" content=\"LDM-CAMERA\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"./icon/logo.png\" />\n      </Helmet>\n      <header className=\"App-header\">\n        <div className=\"camera-info\">\n          Camera: {indexDevice + 1} of {devices.length}\n        </div>\n        <div className={`person ${person > 30 ? \"alert-red\" : \"\"}`}>\n          Person: {person}\n        </div>\n        {/* <div className=\"logApp\">Log: {logApp}</div> */}\n        {devices.length > 1 && (\n          <button className=\"devicesButton\" onClick={handleClick}>\n            Change Camera\n          </button>\n        )}\n        <Webcam\n          ref={webcamRef}\n          muted={true}\n          videoConstraints={{\n            deviceId: deviceId,\n          }}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}